init python:
    import math

init python in utils:
    import store, sys, io
    from pprint import pprint

    _print = print

    def print(*args, **kwargs):
        stream = io.StringIO()
        sep = kwargs.pop("sep", "\n")
        strs = []
        for a in args:
            stream.truncate(0)
            stream.seek(0)
            pprint(a, stream, **kwargs)
            strs.append(stream.getvalue()[:-1])

        _print(*strs, sep=sep)

    def unpack(dct, *keys, **kwargs):
        if "default" in kwargs: default = kwargs.pop("default")
        return (dct.get(k, default) for k in keys)

    def find(condition, iterable, default=None):
        return next(filter(condition, iterable), default)

    def index(condition, iterable, default=-1):
        return find(lambda e: condition(e[1]), enumerate(iterable), (-1,))[0]

    def ensureattr(obj, name, default=None):
        if not hasattr(obj, name): setattr(obj, name, default)
        return getattr(obj, name)

    def ensurekey(dct, name, default=None):
        if name not in dct: dct[name] = default
        return dct[name]

    def screen_get(screen, name, value, default=None, layer=None):
        if isinstance(screen, basestring):
            screen = renpy.get_screen(screen, layer)

        return screen.scope[name] if screen else default

    def screen_set(screen, name, value, layer=None):
        if isinstance(screen, basestring):
            screen = renpy.get_screen(screen, layer)

        if screen: screen.scope[name] = value
        # if screen: sys._getframe(1).f_locals[name] = value

    def ScreenGet(screen, name, value, default=None, layer=None):
        return store.Function(screen_get, screen, name, value, default, layer)

    def ScreenSet(screen, name, value, layer=None):
        return store.Function(screen_set, screen, name, value, layer)